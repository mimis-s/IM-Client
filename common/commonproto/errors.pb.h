// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_errors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_errors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_errors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_errors_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_errors_2eproto;
namespace im_error_proto {
class CommonError;
struct CommonErrorDefaultTypeInternal;
extern CommonErrorDefaultTypeInternal _CommonError_default_instance_;
}  // namespace im_error_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_error_proto::CommonError* Arena::CreateMaybeMessage<::im_error_proto::CommonError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_error_proto {

enum ErrCode : int {
  success = 0,
  common_unexpected_err = 1,
  db_read_err = 2,
  db_write_err = 3,
  account_user_name_repeat = 1001,
  account_account_not_found = 1002,
  account_password_incorrect = 1003,
  friends_user_already_be_friend = 2001,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrCode_IsValid(int value);
constexpr ErrCode ErrCode_MIN = success;
constexpr ErrCode ErrCode_MAX = friends_user_already_be_friend;
constexpr int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor();
template<typename T>
inline const std::string& ErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrCode_descriptor(), enum_t_value);
}
inline bool ErrCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
// ===================================================================

class CommonError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_error_proto.CommonError) */ {
 public:
  inline CommonError() : CommonError(nullptr) {}
  ~CommonError() override;
  explicit PROTOBUF_CONSTEXPR CommonError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonError(const CommonError& from);
  CommonError(CommonError&& from) noexcept
    : CommonError() {
    *this = ::std::move(from);
  }

  inline CommonError& operator=(const CommonError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonError& operator=(CommonError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonError* internal_default_instance() {
    return reinterpret_cast<const CommonError*>(
               &_CommonError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonError& a, CommonError& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommonError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_error_proto.CommonError";
  }
  protected:
  explicit CommonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqPayloadFieldNumber = 4,
    kResPayloadFieldNumber = 5,
    kCodeFieldNumber = 1,
    kReqMsgIDFieldNumber = 2,
    kResMsgIDFieldNumber = 3,
  };
  // string ReqPayload = 4;
  void clear_reqpayload();
  const std::string& reqpayload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reqpayload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reqpayload();
  PROTOBUF_NODISCARD std::string* release_reqpayload();
  void set_allocated_reqpayload(std::string* reqpayload);
  private:
  const std::string& _internal_reqpayload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqpayload(const std::string& value);
  std::string* _internal_mutable_reqpayload();
  public:

  // string ResPayload = 5;
  void clear_respayload();
  const std::string& respayload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_respayload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_respayload();
  PROTOBUF_NODISCARD std::string* release_respayload();
  void set_allocated_respayload(std::string* respayload);
  private:
  const std::string& _internal_respayload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_respayload(const std::string& value);
  std::string* _internal_mutable_respayload();
  public:

  // .im_error_proto.ErrCode Code = 1;
  void clear_code();
  ::im_error_proto::ErrCode code() const;
  void set_code(::im_error_proto::ErrCode value);
  private:
  ::im_error_proto::ErrCode _internal_code() const;
  void _internal_set_code(::im_error_proto::ErrCode value);
  public:

  // uint32 ReqMsgID = 2;
  void clear_reqmsgid();
  uint32_t reqmsgid() const;
  void set_reqmsgid(uint32_t value);
  private:
  uint32_t _internal_reqmsgid() const;
  void _internal_set_reqmsgid(uint32_t value);
  public:

  // uint32 ResMsgID = 3;
  void clear_resmsgid();
  uint32_t resmsgid() const;
  void set_resmsgid(uint32_t value);
  private:
  uint32_t _internal_resmsgid() const;
  void _internal_set_resmsgid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_error_proto.CommonError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqpayload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr respayload_;
  int code_;
  uint32_t reqmsgid_;
  uint32_t resmsgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_errors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonError

// .im_error_proto.ErrCode Code = 1;
inline void CommonError::clear_code() {
  code_ = 0;
}
inline ::im_error_proto::ErrCode CommonError::_internal_code() const {
  return static_cast< ::im_error_proto::ErrCode >(code_);
}
inline ::im_error_proto::ErrCode CommonError::code() const {
  // @@protoc_insertion_point(field_get:im_error_proto.CommonError.Code)
  return _internal_code();
}
inline void CommonError::_internal_set_code(::im_error_proto::ErrCode value) {
  
  code_ = value;
}
inline void CommonError::set_code(::im_error_proto::ErrCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:im_error_proto.CommonError.Code)
}

// uint32 ReqMsgID = 2;
inline void CommonError::clear_reqmsgid() {
  reqmsgid_ = 0u;
}
inline uint32_t CommonError::_internal_reqmsgid() const {
  return reqmsgid_;
}
inline uint32_t CommonError::reqmsgid() const {
  // @@protoc_insertion_point(field_get:im_error_proto.CommonError.ReqMsgID)
  return _internal_reqmsgid();
}
inline void CommonError::_internal_set_reqmsgid(uint32_t value) {
  
  reqmsgid_ = value;
}
inline void CommonError::set_reqmsgid(uint32_t value) {
  _internal_set_reqmsgid(value);
  // @@protoc_insertion_point(field_set:im_error_proto.CommonError.ReqMsgID)
}

// uint32 ResMsgID = 3;
inline void CommonError::clear_resmsgid() {
  resmsgid_ = 0u;
}
inline uint32_t CommonError::_internal_resmsgid() const {
  return resmsgid_;
}
inline uint32_t CommonError::resmsgid() const {
  // @@protoc_insertion_point(field_get:im_error_proto.CommonError.ResMsgID)
  return _internal_resmsgid();
}
inline void CommonError::_internal_set_resmsgid(uint32_t value) {
  
  resmsgid_ = value;
}
inline void CommonError::set_resmsgid(uint32_t value) {
  _internal_set_resmsgid(value);
  // @@protoc_insertion_point(field_set:im_error_proto.CommonError.ResMsgID)
}

// string ReqPayload = 4;
inline void CommonError::clear_reqpayload() {
  reqpayload_.ClearToEmpty();
}
inline const std::string& CommonError::reqpayload() const {
  // @@protoc_insertion_point(field_get:im_error_proto.CommonError.ReqPayload)
  return _internal_reqpayload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonError::set_reqpayload(ArgT0&& arg0, ArgT... args) {
 
 reqpayload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_error_proto.CommonError.ReqPayload)
}
inline std::string* CommonError::mutable_reqpayload() {
  std::string* _s = _internal_mutable_reqpayload();
  // @@protoc_insertion_point(field_mutable:im_error_proto.CommonError.ReqPayload)
  return _s;
}
inline const std::string& CommonError::_internal_reqpayload() const {
  return reqpayload_.Get();
}
inline void CommonError::_internal_set_reqpayload(const std::string& value) {
  
  reqpayload_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonError::_internal_mutable_reqpayload() {
  
  return reqpayload_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonError::release_reqpayload() {
  // @@protoc_insertion_point(field_release:im_error_proto.CommonError.ReqPayload)
  return reqpayload_.Release();
}
inline void CommonError::set_allocated_reqpayload(std::string* reqpayload) {
  if (reqpayload != nullptr) {
    
  } else {
    
  }
  reqpayload_.SetAllocated(reqpayload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reqpayload_.IsDefault()) {
    reqpayload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_error_proto.CommonError.ReqPayload)
}

// string ResPayload = 5;
inline void CommonError::clear_respayload() {
  respayload_.ClearToEmpty();
}
inline const std::string& CommonError::respayload() const {
  // @@protoc_insertion_point(field_get:im_error_proto.CommonError.ResPayload)
  return _internal_respayload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonError::set_respayload(ArgT0&& arg0, ArgT... args) {
 
 respayload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_error_proto.CommonError.ResPayload)
}
inline std::string* CommonError::mutable_respayload() {
  std::string* _s = _internal_mutable_respayload();
  // @@protoc_insertion_point(field_mutable:im_error_proto.CommonError.ResPayload)
  return _s;
}
inline const std::string& CommonError::_internal_respayload() const {
  return respayload_.Get();
}
inline void CommonError::_internal_set_respayload(const std::string& value) {
  
  respayload_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonError::_internal_mutable_respayload() {
  
  return respayload_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonError::release_respayload() {
  // @@protoc_insertion_point(field_release:im_error_proto.CommonError.ResPayload)
  return respayload_.Release();
}
inline void CommonError::set_allocated_respayload(std::string* respayload) {
  if (respayload != nullptr) {
    
  } else {
    
  }
  respayload_.SetAllocated(respayload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (respayload_.IsDefault()) {
    respayload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_error_proto.CommonError.ResPayload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace im_error_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im_error_proto::ErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im_error_proto::ErrCode>() {
  return ::im_error_proto::ErrCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_errors_2eproto
