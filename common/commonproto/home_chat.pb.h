// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5fchat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5fchat_2eproto;
namespace im_home_proto {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatSingleReq;
struct ChatSingleReqDefaultTypeInternal;
extern ChatSingleReqDefaultTypeInternal _ChatSingleReq_default_instance_;
class ChatSingleRes;
struct ChatSingleResDefaultTypeInternal;
extern ChatSingleResDefaultTypeInternal _ChatSingleRes_default_instance_;
}  // namespace im_home_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_home_proto::ChatMessage* Arena::CreateMaybeMessage<::im_home_proto::ChatMessage>(Arena*);
template<> ::im_home_proto::ChatSingleReq* Arena::CreateMaybeMessage<::im_home_proto::ChatSingleReq>(Arena*);
template<> ::im_home_proto::ChatSingleRes* Arena::CreateMaybeMessage<::im_home_proto::ChatSingleRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_home_proto {

enum MessageType_Enum : int {
  MessageType_Enum_Default = 0,
  EnumTextType = 1,
  EnumImgType = 2,
  EnumFileType = 3,
  MessageType_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_Enum_IsValid(int value);
constexpr MessageType_Enum MessageType_Enum_MIN = MessageType_Enum_Default;
constexpr MessageType_Enum MessageType_Enum_MAX = EnumFileType;
constexpr int MessageType_Enum_ARRAYSIZE = MessageType_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_Enum_descriptor();
template<typename T>
inline const std::string& MessageType_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_Enum_descriptor(), enum_t_value);
}
inline bool MessageType_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType_Enum>(
    MessageType_Enum_descriptor(), name, value);
}
enum MessageStatus_Enum : int {
  MessageStatus_Enum_Default = 0,
  EnumSend = 1,
  EnumArrive = 2,
  EnumRead = 3,
  MessageStatus_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageStatus_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageStatus_Enum_IsValid(int value);
constexpr MessageStatus_Enum MessageStatus_Enum_MIN = MessageStatus_Enum_Default;
constexpr MessageStatus_Enum MessageStatus_Enum_MAX = EnumRead;
constexpr int MessageStatus_Enum_ARRAYSIZE = MessageStatus_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageStatus_Enum_descriptor();
template<typename T>
inline const std::string& MessageStatus_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageStatus_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageStatus_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageStatus_Enum_descriptor(), enum_t_value);
}
inline bool MessageStatus_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageStatus_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageStatus_Enum>(
    MessageStatus_Enum_descriptor(), name, value);
}
// ===================================================================

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kSenderIDFieldNumber = 1,
    kReceiverIDFieldNumber = 2,
    kMessageIDFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kSendTimeStampFieldNumber = 5,
    kMessageStatusFieldNumber = 6,
  };
  // string Data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 SenderID = 1;
  void clear_senderid();
  int64_t senderid() const;
  void set_senderid(int64_t value);
  private:
  int64_t _internal_senderid() const;
  void _internal_set_senderid(int64_t value);
  public:

  // int64 ReceiverID = 2;
  void clear_receiverid();
  int64_t receiverid() const;
  void set_receiverid(int64_t value);
  private:
  int64_t _internal_receiverid() const;
  void _internal_set_receiverid(int64_t value);
  public:

  // int32 MessageID = 3;
  void clear_messageid();
  int32_t messageid() const;
  void set_messageid(int32_t value);
  private:
  int32_t _internal_messageid() const;
  void _internal_set_messageid(int32_t value);
  public:

  // .im_home_proto.MessageType_Enum MessageType = 4;
  void clear_messagetype();
  ::im_home_proto::MessageType_Enum messagetype() const;
  void set_messagetype(::im_home_proto::MessageType_Enum value);
  private:
  ::im_home_proto::MessageType_Enum _internal_messagetype() const;
  void _internal_set_messagetype(::im_home_proto::MessageType_Enum value);
  public:

  // int64 SendTimeStamp = 5;
  void clear_sendtimestamp();
  int64_t sendtimestamp() const;
  void set_sendtimestamp(int64_t value);
  private:
  int64_t _internal_sendtimestamp() const;
  void _internal_set_sendtimestamp(int64_t value);
  public:

  // .im_home_proto.MessageStatus_Enum MessageStatus = 6;
  void clear_messagestatus();
  ::im_home_proto::MessageStatus_Enum messagestatus() const;
  void set_messagestatus(::im_home_proto::MessageStatus_Enum value);
  private:
  ::im_home_proto::MessageStatus_Enum _internal_messagestatus() const;
  void _internal_set_messagestatus(::im_home_proto::MessageStatus_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t senderid_;
  int64_t receiverid_;
  int32_t messageid_;
  int messagetype_;
  int64_t sendtimestamp_;
  int messagestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatSingleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ChatSingleReq) */ {
 public:
  inline ChatSingleReq() : ChatSingleReq(nullptr) {}
  ~ChatSingleReq() override;
  explicit PROTOBUF_CONSTEXPR ChatSingleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSingleReq(const ChatSingleReq& from);
  ChatSingleReq(ChatSingleReq&& from) noexcept
    : ChatSingleReq() {
    *this = ::std::move(from);
  }

  inline ChatSingleReq& operator=(const ChatSingleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSingleReq& operator=(ChatSingleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSingleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSingleReq* internal_default_instance() {
    return reinterpret_cast<const ChatSingleReq*>(
               &_ChatSingleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatSingleReq& a, ChatSingleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSingleReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSingleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSingleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSingleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSingleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatSingleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSingleReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ChatSingleReq";
  }
  protected:
  explicit ChatSingleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .im_home_proto.ChatMessage Data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::im_home_proto::ChatMessage& data() const;
  PROTOBUF_NODISCARD ::im_home_proto::ChatMessage* release_data();
  ::im_home_proto::ChatMessage* mutable_data();
  void set_allocated_data(::im_home_proto::ChatMessage* data);
  private:
  const ::im_home_proto::ChatMessage& _internal_data() const;
  ::im_home_proto::ChatMessage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::im_home_proto::ChatMessage* data);
  ::im_home_proto::ChatMessage* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:im_home_proto.ChatSingleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::im_home_proto::ChatMessage* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatSingleRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ChatSingleRes) */ {
 public:
  inline ChatSingleRes() : ChatSingleRes(nullptr) {}
  ~ChatSingleRes() override;
  explicit PROTOBUF_CONSTEXPR ChatSingleRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSingleRes(const ChatSingleRes& from);
  ChatSingleRes(ChatSingleRes&& from) noexcept
    : ChatSingleRes() {
    *this = ::std::move(from);
  }

  inline ChatSingleRes& operator=(const ChatSingleRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSingleRes& operator=(ChatSingleRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSingleRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSingleRes* internal_default_instance() {
    return reinterpret_cast<const ChatSingleRes*>(
               &_ChatSingleRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatSingleRes& a, ChatSingleRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSingleRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSingleRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSingleRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSingleRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSingleRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatSingleRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSingleRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ChatSingleRes";
  }
  protected:
  explicit ChatSingleRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .im_home_proto.ChatMessage Data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::im_home_proto::ChatMessage& data() const;
  PROTOBUF_NODISCARD ::im_home_proto::ChatMessage* release_data();
  ::im_home_proto::ChatMessage* mutable_data();
  void set_allocated_data(::im_home_proto::ChatMessage* data);
  private:
  const ::im_home_proto::ChatMessage& _internal_data() const;
  ::im_home_proto::ChatMessage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::im_home_proto::ChatMessage* data);
  ::im_home_proto::ChatMessage* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:im_home_proto.ChatSingleRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::im_home_proto::ChatMessage* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// int64 SenderID = 1;
inline void ChatMessage::clear_senderid() {
  senderid_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_senderid() const {
  return senderid_;
}
inline int64_t ChatMessage::senderid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.SenderID)
  return _internal_senderid();
}
inline void ChatMessage::_internal_set_senderid(int64_t value) {
  
  senderid_ = value;
}
inline void ChatMessage::set_senderid(int64_t value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.SenderID)
}

// int64 ReceiverID = 2;
inline void ChatMessage::clear_receiverid() {
  receiverid_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_receiverid() const {
  return receiverid_;
}
inline int64_t ChatMessage::receiverid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.ReceiverID)
  return _internal_receiverid();
}
inline void ChatMessage::_internal_set_receiverid(int64_t value) {
  
  receiverid_ = value;
}
inline void ChatMessage::set_receiverid(int64_t value) {
  _internal_set_receiverid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.ReceiverID)
}

// int32 MessageID = 3;
inline void ChatMessage::clear_messageid() {
  messageid_ = 0;
}
inline int32_t ChatMessage::_internal_messageid() const {
  return messageid_;
}
inline int32_t ChatMessage::messageid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.MessageID)
  return _internal_messageid();
}
inline void ChatMessage::_internal_set_messageid(int32_t value) {
  
  messageid_ = value;
}
inline void ChatMessage::set_messageid(int32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.MessageID)
}

// .im_home_proto.MessageType_Enum MessageType = 4;
inline void ChatMessage::clear_messagetype() {
  messagetype_ = 0;
}
inline ::im_home_proto::MessageType_Enum ChatMessage::_internal_messagetype() const {
  return static_cast< ::im_home_proto::MessageType_Enum >(messagetype_);
}
inline ::im_home_proto::MessageType_Enum ChatMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.MessageType)
  return _internal_messagetype();
}
inline void ChatMessage::_internal_set_messagetype(::im_home_proto::MessageType_Enum value) {
  
  messagetype_ = value;
}
inline void ChatMessage::set_messagetype(::im_home_proto::MessageType_Enum value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.MessageType)
}

// int64 SendTimeStamp = 5;
inline void ChatMessage::clear_sendtimestamp() {
  sendtimestamp_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_sendtimestamp() const {
  return sendtimestamp_;
}
inline int64_t ChatMessage::sendtimestamp() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.SendTimeStamp)
  return _internal_sendtimestamp();
}
inline void ChatMessage::_internal_set_sendtimestamp(int64_t value) {
  
  sendtimestamp_ = value;
}
inline void ChatMessage::set_sendtimestamp(int64_t value) {
  _internal_set_sendtimestamp(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.SendTimeStamp)
}

// .im_home_proto.MessageStatus_Enum MessageStatus = 6;
inline void ChatMessage::clear_messagestatus() {
  messagestatus_ = 0;
}
inline ::im_home_proto::MessageStatus_Enum ChatMessage::_internal_messagestatus() const {
  return static_cast< ::im_home_proto::MessageStatus_Enum >(messagestatus_);
}
inline ::im_home_proto::MessageStatus_Enum ChatMessage::messagestatus() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.MessageStatus)
  return _internal_messagestatus();
}
inline void ChatMessage::_internal_set_messagestatus(::im_home_proto::MessageStatus_Enum value) {
  
  messagestatus_ = value;
}
inline void ChatMessage::set_messagestatus(::im_home_proto::MessageStatus_Enum value) {
  _internal_set_messagestatus(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.MessageStatus)
}

// string Data = 7;
inline void ChatMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ChatMessage::data() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatMessage.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.ChatMessage.Data)
}
inline std::string* ChatMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ChatMessage.Data)
  return _s;
}
inline const std::string& ChatMessage::_internal_data() const {
  return data_.Get();
}
inline void ChatMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_data() {
  // @@protoc_insertion_point(field_release:im_home_proto.ChatMessage.Data)
  return data_.Release();
}
inline void ChatMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ChatMessage.Data)
}

// -------------------------------------------------------------------

// ChatSingleReq

// .im_home_proto.ChatMessage Data = 1;
inline bool ChatSingleReq::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ChatSingleReq::has_data() const {
  return _internal_has_data();
}
inline void ChatSingleReq::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::im_home_proto::ChatMessage& ChatSingleReq::_internal_data() const {
  const ::im_home_proto::ChatMessage* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::im_home_proto::ChatMessage&>(
      ::im_home_proto::_ChatMessage_default_instance_);
}
inline const ::im_home_proto::ChatMessage& ChatSingleReq::data() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatSingleReq.Data)
  return _internal_data();
}
inline void ChatSingleReq::unsafe_arena_set_allocated_data(
    ::im_home_proto::ChatMessage* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im_home_proto.ChatSingleReq.Data)
}
inline ::im_home_proto::ChatMessage* ChatSingleReq::release_data() {
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleReq::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:im_home_proto.ChatSingleReq.Data)
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleReq::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::im_home_proto::ChatMessage>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::im_home_proto::ChatMessage* ChatSingleReq::mutable_data() {
  ::im_home_proto::ChatMessage* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ChatSingleReq.Data)
  return _msg;
}
inline void ChatSingleReq::set_allocated_data(::im_home_proto::ChatMessage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ChatSingleReq.Data)
}

// -------------------------------------------------------------------

// ChatSingleRes

// .im_home_proto.ChatMessage Data = 1;
inline bool ChatSingleRes::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ChatSingleRes::has_data() const {
  return _internal_has_data();
}
inline void ChatSingleRes::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::im_home_proto::ChatMessage& ChatSingleRes::_internal_data() const {
  const ::im_home_proto::ChatMessage* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::im_home_proto::ChatMessage&>(
      ::im_home_proto::_ChatMessage_default_instance_);
}
inline const ::im_home_proto::ChatMessage& ChatSingleRes::data() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatSingleRes.Data)
  return _internal_data();
}
inline void ChatSingleRes::unsafe_arena_set_allocated_data(
    ::im_home_proto::ChatMessage* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im_home_proto.ChatSingleRes.Data)
}
inline ::im_home_proto::ChatMessage* ChatSingleRes::release_data() {
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleRes::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:im_home_proto.ChatSingleRes.Data)
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleRes::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::im_home_proto::ChatMessage>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::im_home_proto::ChatMessage* ChatSingleRes::mutable_data() {
  ::im_home_proto::ChatMessage* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ChatSingleRes.Data)
  return _msg;
}
inline void ChatSingleRes::set_allocated_data(::im_home_proto::ChatMessage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ChatSingleRes.Data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_home_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im_home_proto::MessageType_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im_home_proto::MessageType_Enum>() {
  return ::im_home_proto::MessageType_Enum_descriptor();
}
template <> struct is_proto_enum< ::im_home_proto::MessageStatus_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im_home_proto::MessageStatus_Enum>() {
  return ::im_home_proto::MessageStatus_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5fchat_2eproto
