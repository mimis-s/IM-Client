// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5faccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5faccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5faccount_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5faccount_2eproto;
namespace im_home_proto {
class ClientOnlineInfo;
struct ClientOnlineInfoDefaultTypeInternal;
extern ClientOnlineInfoDefaultTypeInternal _ClientOnlineInfo_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
struct LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class RegisterReq;
struct RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
class RegisterRes;
struct RegisterResDefaultTypeInternal;
extern RegisterResDefaultTypeInternal _RegisterRes_default_instance_;
}  // namespace im_home_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_home_proto::ClientOnlineInfo* Arena::CreateMaybeMessage<::im_home_proto::ClientOnlineInfo>(Arena*);
template<> ::im_home_proto::LoginReq* Arena::CreateMaybeMessage<::im_home_proto::LoginReq>(Arena*);
template<> ::im_home_proto::LoginRes* Arena::CreateMaybeMessage<::im_home_proto::LoginRes>(Arena*);
template<> ::im_home_proto::RegisterReq* Arena::CreateMaybeMessage<::im_home_proto::RegisterReq>(Arena*);
template<> ::im_home_proto::RegisterRes* Arena::CreateMaybeMessage<::im_home_proto::RegisterRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_home_proto {

// ===================================================================

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int64 UserID = 1;
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int64_t userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5faccount_2eproto;
};
// -------------------------------------------------------------------

class LoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.LoginRes) */ {
 public:
  inline LoginRes() : LoginRes(nullptr) {}
  ~LoginRes() override;
  explicit PROTOBUF_CONSTEXPR LoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.LoginRes";
  }
  protected:
  explicit LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string UserName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 UserID = 1;
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.LoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int64_t userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5faccount_2eproto;
};
// -------------------------------------------------------------------

class RegisterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.RegisterReq) */ {
 public:
  inline RegisterReq() : RegisterReq(nullptr) {}
  ~RegisterReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterReq(const RegisterReq& from);
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.RegisterReq";
  }
  protected:
  explicit RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.RegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5faccount_2eproto;
};
// -------------------------------------------------------------------

class RegisterRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.RegisterRes) */ {
 public:
  inline RegisterRes() : RegisterRes(nullptr) {}
  ~RegisterRes() override;
  explicit PROTOBUF_CONSTEXPR RegisterRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRes(const RegisterRes& from);
  RegisterRes(RegisterRes&& from) noexcept
    : RegisterRes() {
    *this = ::std::move(from);
  }

  inline RegisterRes& operator=(const RegisterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRes& operator=(RegisterRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRes* internal_default_instance() {
    return reinterpret_cast<const RegisterRes*>(
               &_RegisterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterRes& a, RegisterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.RegisterRes";
  }
  protected:
  explicit RegisterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string UserName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 UserID = 1;
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.RegisterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int64_t userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5faccount_2eproto;
};
// -------------------------------------------------------------------

class ClientOnlineInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ClientOnlineInfo) */ {
 public:
  inline ClientOnlineInfo() : ClientOnlineInfo(nullptr) {}
  ~ClientOnlineInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientOnlineInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientOnlineInfo(const ClientOnlineInfo& from);
  ClientOnlineInfo(ClientOnlineInfo&& from) noexcept
    : ClientOnlineInfo() {
    *this = ::std::move(from);
  }

  inline ClientOnlineInfo& operator=(const ClientOnlineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientOnlineInfo& operator=(ClientOnlineInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientOnlineInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientOnlineInfo* internal_default_instance() {
    return reinterpret_cast<const ClientOnlineInfo*>(
               &_ClientOnlineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientOnlineInfo& a, ClientOnlineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientOnlineInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientOnlineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientOnlineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientOnlineInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientOnlineInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientOnlineInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientOnlineInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ClientOnlineInfo";
  }
  protected:
  explicit ClientOnlineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kIPAddrFieldNumber = 4,
    kUserIDFieldNumber = 1,
    kRegionFieldNumber = 3,
    kNetTypeFieldNumber = 5,
    kCreateAccountTimestampFieldNumber = 6,
    kPreLoginTimestampFieldNumber = 7,
    kPreLogoutTimestampFieldNumber = 8,
    kCurLoginTimestampFieldNumber = 9,
    kClientLocalZoneFieldNumber = 10,
  };
  // string UserName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string IPAddr = 4;
  void clear_ipaddr();
  const std::string& ipaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddr();
  PROTOBUF_NODISCARD std::string* release_ipaddr();
  void set_allocated_ipaddr(std::string* ipaddr);
  private:
  const std::string& _internal_ipaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddr(const std::string& value);
  std::string* _internal_mutable_ipaddr();
  public:

  // int64 UserID = 1;
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // int32 Region = 3;
  void clear_region();
  int32_t region() const;
  void set_region(int32_t value);
  private:
  int32_t _internal_region() const;
  void _internal_set_region(int32_t value);
  public:

  // int32 NetType = 5;
  void clear_nettype();
  int32_t nettype() const;
  void set_nettype(int32_t value);
  private:
  int32_t _internal_nettype() const;
  void _internal_set_nettype(int32_t value);
  public:

  // int64 CreateAccountTimestamp = 6;
  void clear_createaccounttimestamp();
  int64_t createaccounttimestamp() const;
  void set_createaccounttimestamp(int64_t value);
  private:
  int64_t _internal_createaccounttimestamp() const;
  void _internal_set_createaccounttimestamp(int64_t value);
  public:

  // int64 PreLoginTimestamp = 7;
  void clear_prelogintimestamp();
  int64_t prelogintimestamp() const;
  void set_prelogintimestamp(int64_t value);
  private:
  int64_t _internal_prelogintimestamp() const;
  void _internal_set_prelogintimestamp(int64_t value);
  public:

  // int64 PreLogoutTimestamp = 8;
  void clear_prelogouttimestamp();
  int64_t prelogouttimestamp() const;
  void set_prelogouttimestamp(int64_t value);
  private:
  int64_t _internal_prelogouttimestamp() const;
  void _internal_set_prelogouttimestamp(int64_t value);
  public:

  // int64 CurLoginTimestamp = 9;
  void clear_curlogintimestamp();
  int64_t curlogintimestamp() const;
  void set_curlogintimestamp(int64_t value);
  private:
  int64_t _internal_curlogintimestamp() const;
  void _internal_set_curlogintimestamp(int64_t value);
  public:

  // int32 ClientLocalZone = 10;
  void clear_clientlocalzone();
  int32_t clientlocalzone() const;
  void set_clientlocalzone(int32_t value);
  private:
  int32_t _internal_clientlocalzone() const;
  void _internal_set_clientlocalzone(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.ClientOnlineInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddr_;
  int64_t userid_;
  int32_t region_;
  int32_t nettype_;
  int64_t createaccounttimestamp_;
  int64_t prelogintimestamp_;
  int64_t prelogouttimestamp_;
  int64_t curlogintimestamp_;
  int32_t clientlocalzone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// int64 UserID = 1;
inline void LoginReq::clear_userid() {
  userid_ = int64_t{0};
}
inline int64_t LoginReq::_internal_userid() const {
  return userid_;
}
inline int64_t LoginReq::userid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.LoginReq.UserID)
  return _internal_userid();
}
inline void LoginReq::_internal_set_userid(int64_t value) {
  
  userid_ = value;
}
inline void LoginReq::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.LoginReq.UserID)
}

// string Password = 2;
inline void LoginReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:im_home_proto.LoginReq.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.LoginReq.Password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:im_home_proto.LoginReq.Password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:im_home_proto.LoginReq.Password)
  return password_.Release();
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.LoginReq.Password)
}

// -------------------------------------------------------------------

// LoginRes

// int64 UserID = 1;
inline void LoginRes::clear_userid() {
  userid_ = int64_t{0};
}
inline int64_t LoginRes::_internal_userid() const {
  return userid_;
}
inline int64_t LoginRes::userid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.LoginRes.UserID)
  return _internal_userid();
}
inline void LoginRes::_internal_set_userid(int64_t value) {
  
  userid_ = value;
}
inline void LoginRes::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.LoginRes.UserID)
}

// string UserName = 2;
inline void LoginRes::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LoginRes::username() const {
  // @@protoc_insertion_point(field_get:im_home_proto.LoginRes.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRes::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.LoginRes.UserName)
}
inline std::string* LoginRes::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:im_home_proto.LoginRes.UserName)
  return _s;
}
inline const std::string& LoginRes::_internal_username() const {
  return username_.Get();
}
inline void LoginRes::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRes::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRes::release_username() {
  // @@protoc_insertion_point(field_release:im_home_proto.LoginRes.UserName)
  return username_.Release();
}
inline void LoginRes::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.LoginRes.UserName)
}

// -------------------------------------------------------------------

// RegisterReq

// string UserName = 1;
inline void RegisterReq::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RegisterReq::username() const {
  // @@protoc_insertion_point(field_get:im_home_proto.RegisterReq.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.RegisterReq.UserName)
}
inline std::string* RegisterReq::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:im_home_proto.RegisterReq.UserName)
  return _s;
}
inline const std::string& RegisterReq::_internal_username() const {
  return username_.Get();
}
inline void RegisterReq::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterReq::release_username() {
  // @@protoc_insertion_point(field_release:im_home_proto.RegisterReq.UserName)
  return username_.Release();
}
inline void RegisterReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.RegisterReq.UserName)
}

// string Password = 2;
inline void RegisterReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RegisterReq::password() const {
  // @@protoc_insertion_point(field_get:im_home_proto.RegisterReq.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.RegisterReq.Password)
}
inline std::string* RegisterReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:im_home_proto.RegisterReq.Password)
  return _s;
}
inline const std::string& RegisterReq::_internal_password() const {
  return password_.Get();
}
inline void RegisterReq::_internal_set_password(const std::string& value) {
  
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_password() {
  
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:im_home_proto.RegisterReq.Password)
  return password_.Release();
}
inline void RegisterReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.RegisterReq.Password)
}

// -------------------------------------------------------------------

// RegisterRes

// int64 UserID = 1;
inline void RegisterRes::clear_userid() {
  userid_ = int64_t{0};
}
inline int64_t RegisterRes::_internal_userid() const {
  return userid_;
}
inline int64_t RegisterRes::userid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.RegisterRes.UserID)
  return _internal_userid();
}
inline void RegisterRes::_internal_set_userid(int64_t value) {
  
  userid_ = value;
}
inline void RegisterRes::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.RegisterRes.UserID)
}

// string UserName = 2;
inline void RegisterRes::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RegisterRes::username() const {
  // @@protoc_insertion_point(field_get:im_home_proto.RegisterRes.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRes::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.RegisterRes.UserName)
}
inline std::string* RegisterRes::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:im_home_proto.RegisterRes.UserName)
  return _s;
}
inline const std::string& RegisterRes::_internal_username() const {
  return username_.Get();
}
inline void RegisterRes::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRes::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRes::release_username() {
  // @@protoc_insertion_point(field_release:im_home_proto.RegisterRes.UserName)
  return username_.Release();
}
inline void RegisterRes::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.RegisterRes.UserName)
}

// -------------------------------------------------------------------

// ClientOnlineInfo

// int64 UserID = 1;
inline void ClientOnlineInfo::clear_userid() {
  userid_ = int64_t{0};
}
inline int64_t ClientOnlineInfo::_internal_userid() const {
  return userid_;
}
inline int64_t ClientOnlineInfo::userid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.UserID)
  return _internal_userid();
}
inline void ClientOnlineInfo::_internal_set_userid(int64_t value) {
  
  userid_ = value;
}
inline void ClientOnlineInfo::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.UserID)
}

// string UserName = 2;
inline void ClientOnlineInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ClientOnlineInfo::username() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOnlineInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.UserName)
}
inline std::string* ClientOnlineInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ClientOnlineInfo.UserName)
  return _s;
}
inline const std::string& ClientOnlineInfo::_internal_username() const {
  return username_.Get();
}
inline void ClientOnlineInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOnlineInfo::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOnlineInfo::release_username() {
  // @@protoc_insertion_point(field_release:im_home_proto.ClientOnlineInfo.UserName)
  return username_.Release();
}
inline void ClientOnlineInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ClientOnlineInfo.UserName)
}

// int32 Region = 3;
inline void ClientOnlineInfo::clear_region() {
  region_ = 0;
}
inline int32_t ClientOnlineInfo::_internal_region() const {
  return region_;
}
inline int32_t ClientOnlineInfo::region() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.Region)
  return _internal_region();
}
inline void ClientOnlineInfo::_internal_set_region(int32_t value) {
  
  region_ = value;
}
inline void ClientOnlineInfo::set_region(int32_t value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.Region)
}

// string IPAddr = 4;
inline void ClientOnlineInfo::clear_ipaddr() {
  ipaddr_.ClearToEmpty();
}
inline const std::string& ClientOnlineInfo::ipaddr() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.IPAddr)
  return _internal_ipaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOnlineInfo::set_ipaddr(ArgT0&& arg0, ArgT... args) {
 
 ipaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.IPAddr)
}
inline std::string* ClientOnlineInfo::mutable_ipaddr() {
  std::string* _s = _internal_mutable_ipaddr();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ClientOnlineInfo.IPAddr)
  return _s;
}
inline const std::string& ClientOnlineInfo::_internal_ipaddr() const {
  return ipaddr_.Get();
}
inline void ClientOnlineInfo::_internal_set_ipaddr(const std::string& value) {
  
  ipaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOnlineInfo::_internal_mutable_ipaddr() {
  
  return ipaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOnlineInfo::release_ipaddr() {
  // @@protoc_insertion_point(field_release:im_home_proto.ClientOnlineInfo.IPAddr)
  return ipaddr_.Release();
}
inline void ClientOnlineInfo::set_allocated_ipaddr(std::string* ipaddr) {
  if (ipaddr != nullptr) {
    
  } else {
    
  }
  ipaddr_.SetAllocated(ipaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddr_.IsDefault()) {
    ipaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ClientOnlineInfo.IPAddr)
}

// int32 NetType = 5;
inline void ClientOnlineInfo::clear_nettype() {
  nettype_ = 0;
}
inline int32_t ClientOnlineInfo::_internal_nettype() const {
  return nettype_;
}
inline int32_t ClientOnlineInfo::nettype() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.NetType)
  return _internal_nettype();
}
inline void ClientOnlineInfo::_internal_set_nettype(int32_t value) {
  
  nettype_ = value;
}
inline void ClientOnlineInfo::set_nettype(int32_t value) {
  _internal_set_nettype(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.NetType)
}

// int64 CreateAccountTimestamp = 6;
inline void ClientOnlineInfo::clear_createaccounttimestamp() {
  createaccounttimestamp_ = int64_t{0};
}
inline int64_t ClientOnlineInfo::_internal_createaccounttimestamp() const {
  return createaccounttimestamp_;
}
inline int64_t ClientOnlineInfo::createaccounttimestamp() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.CreateAccountTimestamp)
  return _internal_createaccounttimestamp();
}
inline void ClientOnlineInfo::_internal_set_createaccounttimestamp(int64_t value) {
  
  createaccounttimestamp_ = value;
}
inline void ClientOnlineInfo::set_createaccounttimestamp(int64_t value) {
  _internal_set_createaccounttimestamp(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.CreateAccountTimestamp)
}

// int64 PreLoginTimestamp = 7;
inline void ClientOnlineInfo::clear_prelogintimestamp() {
  prelogintimestamp_ = int64_t{0};
}
inline int64_t ClientOnlineInfo::_internal_prelogintimestamp() const {
  return prelogintimestamp_;
}
inline int64_t ClientOnlineInfo::prelogintimestamp() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.PreLoginTimestamp)
  return _internal_prelogintimestamp();
}
inline void ClientOnlineInfo::_internal_set_prelogintimestamp(int64_t value) {
  
  prelogintimestamp_ = value;
}
inline void ClientOnlineInfo::set_prelogintimestamp(int64_t value) {
  _internal_set_prelogintimestamp(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.PreLoginTimestamp)
}

// int64 PreLogoutTimestamp = 8;
inline void ClientOnlineInfo::clear_prelogouttimestamp() {
  prelogouttimestamp_ = int64_t{0};
}
inline int64_t ClientOnlineInfo::_internal_prelogouttimestamp() const {
  return prelogouttimestamp_;
}
inline int64_t ClientOnlineInfo::prelogouttimestamp() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.PreLogoutTimestamp)
  return _internal_prelogouttimestamp();
}
inline void ClientOnlineInfo::_internal_set_prelogouttimestamp(int64_t value) {
  
  prelogouttimestamp_ = value;
}
inline void ClientOnlineInfo::set_prelogouttimestamp(int64_t value) {
  _internal_set_prelogouttimestamp(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.PreLogoutTimestamp)
}

// int64 CurLoginTimestamp = 9;
inline void ClientOnlineInfo::clear_curlogintimestamp() {
  curlogintimestamp_ = int64_t{0};
}
inline int64_t ClientOnlineInfo::_internal_curlogintimestamp() const {
  return curlogintimestamp_;
}
inline int64_t ClientOnlineInfo::curlogintimestamp() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.CurLoginTimestamp)
  return _internal_curlogintimestamp();
}
inline void ClientOnlineInfo::_internal_set_curlogintimestamp(int64_t value) {
  
  curlogintimestamp_ = value;
}
inline void ClientOnlineInfo::set_curlogintimestamp(int64_t value) {
  _internal_set_curlogintimestamp(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.CurLoginTimestamp)
}

// int32 ClientLocalZone = 10;
inline void ClientOnlineInfo::clear_clientlocalzone() {
  clientlocalzone_ = 0;
}
inline int32_t ClientOnlineInfo::_internal_clientlocalzone() const {
  return clientlocalzone_;
}
inline int32_t ClientOnlineInfo::clientlocalzone() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ClientOnlineInfo.ClientLocalZone)
  return _internal_clientlocalzone();
}
inline void ClientOnlineInfo::_internal_set_clientlocalzone(int32_t value) {
  
  clientlocalzone_ = value;
}
inline void ClientOnlineInfo::set_clientlocalzone(int32_t value) {
  _internal_set_clientlocalzone(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ClientOnlineInfo.ClientLocalZone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_home_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5faccount_2eproto
