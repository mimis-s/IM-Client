// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_relay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5frelay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5frelay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "home_chat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5frelay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5frelay_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5frelay_2eproto;
namespace im_home_proto {
class AgreeApplyFriendsToReceiver;
struct AgreeApplyFriendsToReceiverDefaultTypeInternal;
extern AgreeApplyFriendsToReceiverDefaultTypeInternal _AgreeApplyFriendsToReceiver_default_instance_;
class ApplyFriendsToReceiver;
struct ApplyFriendsToReceiverDefaultTypeInternal;
extern ApplyFriendsToReceiverDefaultTypeInternal _ApplyFriendsToReceiver_default_instance_;
class ChatSingleToReceiver;
struct ChatSingleToReceiverDefaultTypeInternal;
extern ChatSingleToReceiverDefaultTypeInternal _ChatSingleToReceiver_default_instance_;
}  // namespace im_home_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_home_proto::AgreeApplyFriendsToReceiver* Arena::CreateMaybeMessage<::im_home_proto::AgreeApplyFriendsToReceiver>(Arena*);
template<> ::im_home_proto::ApplyFriendsToReceiver* Arena::CreateMaybeMessage<::im_home_proto::ApplyFriendsToReceiver>(Arena*);
template<> ::im_home_proto::ChatSingleToReceiver* Arena::CreateMaybeMessage<::im_home_proto::ChatSingleToReceiver>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_home_proto {

// ===================================================================

class ChatSingleToReceiver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ChatSingleToReceiver) */ {
 public:
  inline ChatSingleToReceiver() : ChatSingleToReceiver(nullptr) {}
  ~ChatSingleToReceiver() override;
  explicit PROTOBUF_CONSTEXPR ChatSingleToReceiver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSingleToReceiver(const ChatSingleToReceiver& from);
  ChatSingleToReceiver(ChatSingleToReceiver&& from) noexcept
    : ChatSingleToReceiver() {
    *this = ::std::move(from);
  }

  inline ChatSingleToReceiver& operator=(const ChatSingleToReceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSingleToReceiver& operator=(ChatSingleToReceiver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSingleToReceiver& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSingleToReceiver* internal_default_instance() {
    return reinterpret_cast<const ChatSingleToReceiver*>(
               &_ChatSingleToReceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatSingleToReceiver& a, ChatSingleToReceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSingleToReceiver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSingleToReceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSingleToReceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSingleToReceiver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSingleToReceiver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatSingleToReceiver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSingleToReceiver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ChatSingleToReceiver";
  }
  protected:
  explicit ChatSingleToReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .im_home_proto.ChatMessage Data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::im_home_proto::ChatMessage& data() const;
  PROTOBUF_NODISCARD ::im_home_proto::ChatMessage* release_data();
  ::im_home_proto::ChatMessage* mutable_data();
  void set_allocated_data(::im_home_proto::ChatMessage* data);
  private:
  const ::im_home_proto::ChatMessage& _internal_data() const;
  ::im_home_proto::ChatMessage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::im_home_proto::ChatMessage* data);
  ::im_home_proto::ChatMessage* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:im_home_proto.ChatSingleToReceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::im_home_proto::ChatMessage* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5frelay_2eproto;
};
// -------------------------------------------------------------------

class ApplyFriendsToReceiver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ApplyFriendsToReceiver) */ {
 public:
  inline ApplyFriendsToReceiver() : ApplyFriendsToReceiver(nullptr) {}
  ~ApplyFriendsToReceiver() override;
  explicit PROTOBUF_CONSTEXPR ApplyFriendsToReceiver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyFriendsToReceiver(const ApplyFriendsToReceiver& from);
  ApplyFriendsToReceiver(ApplyFriendsToReceiver&& from) noexcept
    : ApplyFriendsToReceiver() {
    *this = ::std::move(from);
  }

  inline ApplyFriendsToReceiver& operator=(const ApplyFriendsToReceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyFriendsToReceiver& operator=(ApplyFriendsToReceiver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyFriendsToReceiver& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyFriendsToReceiver* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendsToReceiver*>(
               &_ApplyFriendsToReceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplyFriendsToReceiver& a, ApplyFriendsToReceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyFriendsToReceiver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyFriendsToReceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyFriendsToReceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyFriendsToReceiver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyFriendsToReceiver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyFriendsToReceiver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFriendsToReceiver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ApplyFriendsToReceiver";
  }
  protected:
  explicit ApplyFriendsToReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIDFieldNumber = 1,
    kReceiverIDFieldNumber = 2,
  };
  // int64 SenderID = 1;
  void clear_senderid();
  int64_t senderid() const;
  void set_senderid(int64_t value);
  private:
  int64_t _internal_senderid() const;
  void _internal_set_senderid(int64_t value);
  public:

  // int64 ReceiverID = 2;
  void clear_receiverid();
  int64_t receiverid() const;
  void set_receiverid(int64_t value);
  private:
  int64_t _internal_receiverid() const;
  void _internal_set_receiverid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.ApplyFriendsToReceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t senderid_;
  int64_t receiverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5frelay_2eproto;
};
// -------------------------------------------------------------------

class AgreeApplyFriendsToReceiver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.AgreeApplyFriendsToReceiver) */ {
 public:
  inline AgreeApplyFriendsToReceiver() : AgreeApplyFriendsToReceiver(nullptr) {}
  ~AgreeApplyFriendsToReceiver() override;
  explicit PROTOBUF_CONSTEXPR AgreeApplyFriendsToReceiver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreeApplyFriendsToReceiver(const AgreeApplyFriendsToReceiver& from);
  AgreeApplyFriendsToReceiver(AgreeApplyFriendsToReceiver&& from) noexcept
    : AgreeApplyFriendsToReceiver() {
    *this = ::std::move(from);
  }

  inline AgreeApplyFriendsToReceiver& operator=(const AgreeApplyFriendsToReceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreeApplyFriendsToReceiver& operator=(AgreeApplyFriendsToReceiver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreeApplyFriendsToReceiver& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreeApplyFriendsToReceiver* internal_default_instance() {
    return reinterpret_cast<const AgreeApplyFriendsToReceiver*>(
               &_AgreeApplyFriendsToReceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgreeApplyFriendsToReceiver& a, AgreeApplyFriendsToReceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreeApplyFriendsToReceiver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreeApplyFriendsToReceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgreeApplyFriendsToReceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgreeApplyFriendsToReceiver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreeApplyFriendsToReceiver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgreeApplyFriendsToReceiver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeApplyFriendsToReceiver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.AgreeApplyFriendsToReceiver";
  }
  protected:
  explicit AgreeApplyFriendsToReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIDFieldNumber = 1,
    kReceiverIDFieldNumber = 2,
  };
  // int64 SenderID = 1;
  void clear_senderid();
  int64_t senderid() const;
  void set_senderid(int64_t value);
  private:
  int64_t _internal_senderid() const;
  void _internal_set_senderid(int64_t value);
  public:

  // int64 ReceiverID = 2;
  void clear_receiverid();
  int64_t receiverid() const;
  void set_receiverid(int64_t value);
  private:
  int64_t _internal_receiverid() const;
  void _internal_set_receiverid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.AgreeApplyFriendsToReceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t senderid_;
  int64_t receiverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5frelay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatSingleToReceiver

// .im_home_proto.ChatMessage Data = 1;
inline bool ChatSingleToReceiver::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ChatSingleToReceiver::has_data() const {
  return _internal_has_data();
}
inline const ::im_home_proto::ChatMessage& ChatSingleToReceiver::_internal_data() const {
  const ::im_home_proto::ChatMessage* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::im_home_proto::ChatMessage&>(
      ::im_home_proto::_ChatMessage_default_instance_);
}
inline const ::im_home_proto::ChatMessage& ChatSingleToReceiver::data() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ChatSingleToReceiver.Data)
  return _internal_data();
}
inline void ChatSingleToReceiver::unsafe_arena_set_allocated_data(
    ::im_home_proto::ChatMessage* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im_home_proto.ChatSingleToReceiver.Data)
}
inline ::im_home_proto::ChatMessage* ChatSingleToReceiver::release_data() {
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleToReceiver::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:im_home_proto.ChatSingleToReceiver.Data)
  
  ::im_home_proto::ChatMessage* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::im_home_proto::ChatMessage* ChatSingleToReceiver::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::im_home_proto::ChatMessage>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::im_home_proto::ChatMessage* ChatSingleToReceiver::mutable_data() {
  ::im_home_proto::ChatMessage* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ChatSingleToReceiver.Data)
  return _msg;
}
inline void ChatSingleToReceiver::set_allocated_data(::im_home_proto::ChatMessage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ChatSingleToReceiver.Data)
}

// -------------------------------------------------------------------

// ApplyFriendsToReceiver

// int64 SenderID = 1;
inline void ApplyFriendsToReceiver::clear_senderid() {
  senderid_ = int64_t{0};
}
inline int64_t ApplyFriendsToReceiver::_internal_senderid() const {
  return senderid_;
}
inline int64_t ApplyFriendsToReceiver::senderid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ApplyFriendsToReceiver.SenderID)
  return _internal_senderid();
}
inline void ApplyFriendsToReceiver::_internal_set_senderid(int64_t value) {
  
  senderid_ = value;
}
inline void ApplyFriendsToReceiver::set_senderid(int64_t value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ApplyFriendsToReceiver.SenderID)
}

// int64 ReceiverID = 2;
inline void ApplyFriendsToReceiver::clear_receiverid() {
  receiverid_ = int64_t{0};
}
inline int64_t ApplyFriendsToReceiver::_internal_receiverid() const {
  return receiverid_;
}
inline int64_t ApplyFriendsToReceiver::receiverid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ApplyFriendsToReceiver.ReceiverID)
  return _internal_receiverid();
}
inline void ApplyFriendsToReceiver::_internal_set_receiverid(int64_t value) {
  
  receiverid_ = value;
}
inline void ApplyFriendsToReceiver::set_receiverid(int64_t value) {
  _internal_set_receiverid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ApplyFriendsToReceiver.ReceiverID)
}

// -------------------------------------------------------------------

// AgreeApplyFriendsToReceiver

// int64 SenderID = 1;
inline void AgreeApplyFriendsToReceiver::clear_senderid() {
  senderid_ = int64_t{0};
}
inline int64_t AgreeApplyFriendsToReceiver::_internal_senderid() const {
  return senderid_;
}
inline int64_t AgreeApplyFriendsToReceiver::senderid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.AgreeApplyFriendsToReceiver.SenderID)
  return _internal_senderid();
}
inline void AgreeApplyFriendsToReceiver::_internal_set_senderid(int64_t value) {
  
  senderid_ = value;
}
inline void AgreeApplyFriendsToReceiver::set_senderid(int64_t value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.AgreeApplyFriendsToReceiver.SenderID)
}

// int64 ReceiverID = 2;
inline void AgreeApplyFriendsToReceiver::clear_receiverid() {
  receiverid_ = int64_t{0};
}
inline int64_t AgreeApplyFriendsToReceiver::_internal_receiverid() const {
  return receiverid_;
}
inline int64_t AgreeApplyFriendsToReceiver::receiverid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.AgreeApplyFriendsToReceiver.ReceiverID)
  return _internal_receiverid();
}
inline void AgreeApplyFriendsToReceiver::_internal_set_receiverid(int64_t value) {
  
  receiverid_ = value;
}
inline void AgreeApplyFriendsToReceiver::set_receiverid(int64_t value) {
  _internal_set_receiverid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.AgreeApplyFriendsToReceiver.ReceiverID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_home_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5frelay_2eproto
