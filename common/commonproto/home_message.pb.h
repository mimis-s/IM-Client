// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "home_chat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5fmessage_2eproto;
namespace im_home_proto {
class GetSingleChatHistoryReq;
struct GetSingleChatHistoryReqDefaultTypeInternal;
extern GetSingleChatHistoryReqDefaultTypeInternal _GetSingleChatHistoryReq_default_instance_;
class GetSingleChatHistoryRes;
struct GetSingleChatHistoryResDefaultTypeInternal;
extern GetSingleChatHistoryResDefaultTypeInternal _GetSingleChatHistoryRes_default_instance_;
}  // namespace im_home_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_home_proto::GetSingleChatHistoryReq* Arena::CreateMaybeMessage<::im_home_proto::GetSingleChatHistoryReq>(Arena*);
template<> ::im_home_proto::GetSingleChatHistoryRes* Arena::CreateMaybeMessage<::im_home_proto::GetSingleChatHistoryRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_home_proto {

// ===================================================================

class GetSingleChatHistoryReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.GetSingleChatHistoryReq) */ {
 public:
  inline GetSingleChatHistoryReq() : GetSingleChatHistoryReq(nullptr) {}
  ~GetSingleChatHistoryReq() override;
  explicit PROTOBUF_CONSTEXPR GetSingleChatHistoryReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSingleChatHistoryReq(const GetSingleChatHistoryReq& from);
  GetSingleChatHistoryReq(GetSingleChatHistoryReq&& from) noexcept
    : GetSingleChatHistoryReq() {
    *this = ::std::move(from);
  }

  inline GetSingleChatHistoryReq& operator=(const GetSingleChatHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSingleChatHistoryReq& operator=(GetSingleChatHistoryReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSingleChatHistoryReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSingleChatHistoryReq* internal_default_instance() {
    return reinterpret_cast<const GetSingleChatHistoryReq*>(
               &_GetSingleChatHistoryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSingleChatHistoryReq& a, GetSingleChatHistoryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSingleChatHistoryReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSingleChatHistoryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSingleChatHistoryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSingleChatHistoryReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSingleChatHistoryReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSingleChatHistoryReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleChatHistoryReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.GetSingleChatHistoryReq";
  }
  protected:
  explicit GetSingleChatHistoryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNotGainMessageIDFieldNumber = 1,
    kFriendIDFieldNumber = 2,
  };
  // int64 MaxNotGainMessageID = 1;
  void clear_maxnotgainmessageid();
  int64_t maxnotgainmessageid() const;
  void set_maxnotgainmessageid(int64_t value);
  private:
  int64_t _internal_maxnotgainmessageid() const;
  void _internal_set_maxnotgainmessageid(int64_t value);
  public:

  // int64 FriendID = 2;
  void clear_friendid();
  int64_t friendid() const;
  void set_friendid(int64_t value);
  private:
  int64_t _internal_friendid() const;
  void _internal_set_friendid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.GetSingleChatHistoryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t maxnotgainmessageid_;
  int64_t friendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetSingleChatHistoryRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.GetSingleChatHistoryRes) */ {
 public:
  inline GetSingleChatHistoryRes() : GetSingleChatHistoryRes(nullptr) {}
  ~GetSingleChatHistoryRes() override;
  explicit PROTOBUF_CONSTEXPR GetSingleChatHistoryRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSingleChatHistoryRes(const GetSingleChatHistoryRes& from);
  GetSingleChatHistoryRes(GetSingleChatHistoryRes&& from) noexcept
    : GetSingleChatHistoryRes() {
    *this = ::std::move(from);
  }

  inline GetSingleChatHistoryRes& operator=(const GetSingleChatHistoryRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSingleChatHistoryRes& operator=(GetSingleChatHistoryRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSingleChatHistoryRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSingleChatHistoryRes* internal_default_instance() {
    return reinterpret_cast<const GetSingleChatHistoryRes*>(
               &_GetSingleChatHistoryRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetSingleChatHistoryRes& a, GetSingleChatHistoryRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSingleChatHistoryRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSingleChatHistoryRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSingleChatHistoryRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSingleChatHistoryRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSingleChatHistoryRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSingleChatHistoryRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleChatHistoryRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.GetSingleChatHistoryRes";
  }
  protected:
  explicit GetSingleChatHistoryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFriendIDFieldNumber = 1,
  };
  // repeated .im_home_proto.ChatMessage Data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::im_home_proto::ChatMessage* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::ChatMessage >*
      mutable_data();
  private:
  const ::im_home_proto::ChatMessage& _internal_data(int index) const;
  ::im_home_proto::ChatMessage* _internal_add_data();
  public:
  const ::im_home_proto::ChatMessage& data(int index) const;
  ::im_home_proto::ChatMessage* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::ChatMessage >&
      data() const;

  // int64 FriendID = 1;
  void clear_friendid();
  int64_t friendid() const;
  void set_friendid(int64_t value);
  private:
  int64_t _internal_friendid() const;
  void _internal_set_friendid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.GetSingleChatHistoryRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::ChatMessage > data_;
  int64_t friendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSingleChatHistoryReq

// int64 MaxNotGainMessageID = 1;
inline void GetSingleChatHistoryReq::clear_maxnotgainmessageid() {
  maxnotgainmessageid_ = int64_t{0};
}
inline int64_t GetSingleChatHistoryReq::_internal_maxnotgainmessageid() const {
  return maxnotgainmessageid_;
}
inline int64_t GetSingleChatHistoryReq::maxnotgainmessageid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.GetSingleChatHistoryReq.MaxNotGainMessageID)
  return _internal_maxnotgainmessageid();
}
inline void GetSingleChatHistoryReq::_internal_set_maxnotgainmessageid(int64_t value) {
  
  maxnotgainmessageid_ = value;
}
inline void GetSingleChatHistoryReq::set_maxnotgainmessageid(int64_t value) {
  _internal_set_maxnotgainmessageid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.GetSingleChatHistoryReq.MaxNotGainMessageID)
}

// int64 FriendID = 2;
inline void GetSingleChatHistoryReq::clear_friendid() {
  friendid_ = int64_t{0};
}
inline int64_t GetSingleChatHistoryReq::_internal_friendid() const {
  return friendid_;
}
inline int64_t GetSingleChatHistoryReq::friendid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.GetSingleChatHistoryReq.FriendID)
  return _internal_friendid();
}
inline void GetSingleChatHistoryReq::_internal_set_friendid(int64_t value) {
  
  friendid_ = value;
}
inline void GetSingleChatHistoryReq::set_friendid(int64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.GetSingleChatHistoryReq.FriendID)
}

// -------------------------------------------------------------------

// GetSingleChatHistoryRes

// int64 FriendID = 1;
inline void GetSingleChatHistoryRes::clear_friendid() {
  friendid_ = int64_t{0};
}
inline int64_t GetSingleChatHistoryRes::_internal_friendid() const {
  return friendid_;
}
inline int64_t GetSingleChatHistoryRes::friendid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.GetSingleChatHistoryRes.FriendID)
  return _internal_friendid();
}
inline void GetSingleChatHistoryRes::_internal_set_friendid(int64_t value) {
  
  friendid_ = value;
}
inline void GetSingleChatHistoryRes::set_friendid(int64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.GetSingleChatHistoryRes.FriendID)
}

// repeated .im_home_proto.ChatMessage Data = 2;
inline int GetSingleChatHistoryRes::_internal_data_size() const {
  return data_.size();
}
inline int GetSingleChatHistoryRes::data_size() const {
  return _internal_data_size();
}
inline ::im_home_proto::ChatMessage* GetSingleChatHistoryRes::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:im_home_proto.GetSingleChatHistoryRes.Data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::ChatMessage >*
GetSingleChatHistoryRes::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:im_home_proto.GetSingleChatHistoryRes.Data)
  return &data_;
}
inline const ::im_home_proto::ChatMessage& GetSingleChatHistoryRes::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::im_home_proto::ChatMessage& GetSingleChatHistoryRes::data(int index) const {
  // @@protoc_insertion_point(field_get:im_home_proto.GetSingleChatHistoryRes.Data)
  return _internal_data(index);
}
inline ::im_home_proto::ChatMessage* GetSingleChatHistoryRes::_internal_add_data() {
  return data_.Add();
}
inline ::im_home_proto::ChatMessage* GetSingleChatHistoryRes::add_data() {
  ::im_home_proto::ChatMessage* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:im_home_proto.GetSingleChatHistoryRes.Data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::ChatMessage >&
GetSingleChatHistoryRes::data() const {
  // @@protoc_insertion_point(field_list:im_home_proto.GetSingleChatHistoryRes.Data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_home_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5fmessage_2eproto
