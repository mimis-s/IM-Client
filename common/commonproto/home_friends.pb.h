// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_friends.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5ffriends_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5ffriends_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "home_account.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5ffriends_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5ffriends_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5ffriends_2eproto;
namespace im_home_proto {
class AgreeFriendApplyReq;
struct AgreeFriendApplyReqDefaultTypeInternal;
extern AgreeFriendApplyReqDefaultTypeInternal _AgreeFriendApplyReq_default_instance_;
class AgreeFriendApplyRes;
struct AgreeFriendApplyResDefaultTypeInternal;
extern AgreeFriendApplyResDefaultTypeInternal _AgreeFriendApplyRes_default_instance_;
class ApplyFriendsReq;
struct ApplyFriendsReqDefaultTypeInternal;
extern ApplyFriendsReqDefaultTypeInternal _ApplyFriendsReq_default_instance_;
class ApplyFriendsRes;
struct ApplyFriendsResDefaultTypeInternal;
extern ApplyFriendsResDefaultTypeInternal _ApplyFriendsRes_default_instance_;
class DelFriendsReq;
struct DelFriendsReqDefaultTypeInternal;
extern DelFriendsReqDefaultTypeInternal _DelFriendsReq_default_instance_;
class DelFriendsRes;
struct DelFriendsResDefaultTypeInternal;
extern DelFriendsResDefaultTypeInternal _DelFriendsRes_default_instance_;
class FriendInfoStatus;
struct FriendInfoStatusDefaultTypeInternal;
extern FriendInfoStatusDefaultTypeInternal _FriendInfoStatus_default_instance_;
class FriendsStatusList;
struct FriendsStatusListDefaultTypeInternal;
extern FriendsStatusListDefaultTypeInternal _FriendsStatusList_default_instance_;
}  // namespace im_home_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::im_home_proto::AgreeFriendApplyReq* Arena::CreateMaybeMessage<::im_home_proto::AgreeFriendApplyReq>(Arena*);
template<> ::im_home_proto::AgreeFriendApplyRes* Arena::CreateMaybeMessage<::im_home_proto::AgreeFriendApplyRes>(Arena*);
template<> ::im_home_proto::ApplyFriendsReq* Arena::CreateMaybeMessage<::im_home_proto::ApplyFriendsReq>(Arena*);
template<> ::im_home_proto::ApplyFriendsRes* Arena::CreateMaybeMessage<::im_home_proto::ApplyFriendsRes>(Arena*);
template<> ::im_home_proto::DelFriendsReq* Arena::CreateMaybeMessage<::im_home_proto::DelFriendsReq>(Arena*);
template<> ::im_home_proto::DelFriendsRes* Arena::CreateMaybeMessage<::im_home_proto::DelFriendsRes>(Arena*);
template<> ::im_home_proto::FriendInfoStatus* Arena::CreateMaybeMessage<::im_home_proto::FriendInfoStatus>(Arena*);
template<> ::im_home_proto::FriendsStatusList* Arena::CreateMaybeMessage<::im_home_proto::FriendsStatusList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im_home_proto {

// ===================================================================

class FriendInfoStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.FriendInfoStatus) */ {
 public:
  inline FriendInfoStatus() : FriendInfoStatus(nullptr) {}
  ~FriendInfoStatus() override;
  explicit PROTOBUF_CONSTEXPR FriendInfoStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfoStatus(const FriendInfoStatus& from);
  FriendInfoStatus(FriendInfoStatus&& from) noexcept
    : FriendInfoStatus() {
    *this = ::std::move(from);
  }

  inline FriendInfoStatus& operator=(const FriendInfoStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfoStatus& operator=(FriendInfoStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfoStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfoStatus* internal_default_instance() {
    return reinterpret_cast<const FriendInfoStatus*>(
               &_FriendInfoStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendInfoStatus& a, FriendInfoStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfoStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfoStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfoStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfoStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfoStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInfoStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfoStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.FriendInfoStatus";
  }
  protected:
  explicit FriendInfoStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 1,
    kIsUpdateHeadFieldNumber = 2,
  };
  // .im_home_proto.UserInfo Friend = 1;
  bool has_friend_() const;
  private:
  bool _internal_has_friend_() const;
  public:
  void clear_friend_();
  const ::im_home_proto::UserInfo& friend_() const;
  PROTOBUF_NODISCARD ::im_home_proto::UserInfo* release_friend_();
  ::im_home_proto::UserInfo* mutable_friend_();
  void set_allocated_friend_(::im_home_proto::UserInfo* friend_);
  private:
  const ::im_home_proto::UserInfo& _internal_friend_() const;
  ::im_home_proto::UserInfo* _internal_mutable_friend_();
  public:
  void unsafe_arena_set_allocated_friend_(
      ::im_home_proto::UserInfo* friend_);
  ::im_home_proto::UserInfo* unsafe_arena_release_friend_();

  // bool IsUpdateHead = 2;
  void clear_isupdatehead();
  bool isupdatehead() const;
  void set_isupdatehead(bool value);
  private:
  bool _internal_isupdatehead() const;
  void _internal_set_isupdatehead(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.FriendInfoStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::im_home_proto::UserInfo* friend__;
  bool isupdatehead_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class FriendsStatusList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.FriendsStatusList) */ {
 public:
  inline FriendsStatusList() : FriendsStatusList(nullptr) {}
  ~FriendsStatusList() override;
  explicit PROTOBUF_CONSTEXPR FriendsStatusList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendsStatusList(const FriendsStatusList& from);
  FriendsStatusList(FriendsStatusList&& from) noexcept
    : FriendsStatusList() {
    *this = ::std::move(from);
  }

  inline FriendsStatusList& operator=(const FriendsStatusList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendsStatusList& operator=(FriendsStatusList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendsStatusList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendsStatusList* internal_default_instance() {
    return reinterpret_cast<const FriendsStatusList*>(
               &_FriendsStatusList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendsStatusList& a, FriendsStatusList& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendsStatusList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendsStatusList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendsStatusList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendsStatusList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendsStatusList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendsStatusList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendsStatusList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.FriendsStatusList";
  }
  protected:
  explicit FriendsStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsStatusListFieldNumber = 1,
    kSendFriendApplyListFieldNumber = 2,
    kReceiveFriendApplyListFieldNumber = 3,
  };
  // repeated .im_home_proto.FriendInfoStatus FriendsStatusList = 1;
  int friendsstatuslist_size() const;
  private:
  int _internal_friendsstatuslist_size() const;
  public:
  void clear_friendsstatuslist();
  ::im_home_proto::FriendInfoStatus* mutable_friendsstatuslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
      mutable_friendsstatuslist();
  private:
  const ::im_home_proto::FriendInfoStatus& _internal_friendsstatuslist(int index) const;
  ::im_home_proto::FriendInfoStatus* _internal_add_friendsstatuslist();
  public:
  const ::im_home_proto::FriendInfoStatus& friendsstatuslist(int index) const;
  ::im_home_proto::FriendInfoStatus* add_friendsstatuslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
      friendsstatuslist() const;

  // repeated .im_home_proto.FriendInfoStatus SendFriendApplyList = 2;
  int sendfriendapplylist_size() const;
  private:
  int _internal_sendfriendapplylist_size() const;
  public:
  void clear_sendfriendapplylist();
  ::im_home_proto::FriendInfoStatus* mutable_sendfriendapplylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
      mutable_sendfriendapplylist();
  private:
  const ::im_home_proto::FriendInfoStatus& _internal_sendfriendapplylist(int index) const;
  ::im_home_proto::FriendInfoStatus* _internal_add_sendfriendapplylist();
  public:
  const ::im_home_proto::FriendInfoStatus& sendfriendapplylist(int index) const;
  ::im_home_proto::FriendInfoStatus* add_sendfriendapplylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
      sendfriendapplylist() const;

  // repeated .im_home_proto.FriendInfoStatus ReceiveFriendApplyList = 3;
  int receivefriendapplylist_size() const;
  private:
  int _internal_receivefriendapplylist_size() const;
  public:
  void clear_receivefriendapplylist();
  ::im_home_proto::FriendInfoStatus* mutable_receivefriendapplylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
      mutable_receivefriendapplylist();
  private:
  const ::im_home_proto::FriendInfoStatus& _internal_receivefriendapplylist(int index) const;
  ::im_home_proto::FriendInfoStatus* _internal_add_receivefriendapplylist();
  public:
  const ::im_home_proto::FriendInfoStatus& receivefriendapplylist(int index) const;
  ::im_home_proto::FriendInfoStatus* add_receivefriendapplylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
      receivefriendapplylist() const;

  // @@protoc_insertion_point(class_scope:im_home_proto.FriendsStatusList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus > friendsstatuslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus > sendfriendapplylist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus > receivefriendapplylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class ApplyFriendsReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ApplyFriendsReq) */ {
 public:
  inline ApplyFriendsReq() : ApplyFriendsReq(nullptr) {}
  ~ApplyFriendsReq() override;
  explicit PROTOBUF_CONSTEXPR ApplyFriendsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyFriendsReq(const ApplyFriendsReq& from);
  ApplyFriendsReq(ApplyFriendsReq&& from) noexcept
    : ApplyFriendsReq() {
    *this = ::std::move(from);
  }

  inline ApplyFriendsReq& operator=(const ApplyFriendsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyFriendsReq& operator=(ApplyFriendsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyFriendsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyFriendsReq* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendsReq*>(
               &_ApplyFriendsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApplyFriendsReq& a, ApplyFriendsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyFriendsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyFriendsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyFriendsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyFriendsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyFriendsReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyFriendsReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFriendsReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ApplyFriendsReq";
  }
  protected:
  explicit ApplyFriendsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyFriendsIDFieldNumber = 1,
  };
  // int64 ApplyFriendsID = 1;
  void clear_applyfriendsid();
  int64_t applyfriendsid() const;
  void set_applyfriendsid(int64_t value);
  private:
  int64_t _internal_applyfriendsid() const;
  void _internal_set_applyfriendsid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.ApplyFriendsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t applyfriendsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class ApplyFriendsRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.ApplyFriendsRes) */ {
 public:
  inline ApplyFriendsRes() : ApplyFriendsRes(nullptr) {}
  ~ApplyFriendsRes() override;
  explicit PROTOBUF_CONSTEXPR ApplyFriendsRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyFriendsRes(const ApplyFriendsRes& from);
  ApplyFriendsRes(ApplyFriendsRes&& from) noexcept
    : ApplyFriendsRes() {
    *this = ::std::move(from);
  }

  inline ApplyFriendsRes& operator=(const ApplyFriendsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyFriendsRes& operator=(ApplyFriendsRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyFriendsRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyFriendsRes* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendsRes*>(
               &_ApplyFriendsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApplyFriendsRes& a, ApplyFriendsRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyFriendsRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyFriendsRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyFriendsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyFriendsRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyFriendsRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyFriendsRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFriendsRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.ApplyFriendsRes";
  }
  protected:
  explicit ApplyFriendsRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendInfoFieldNumber = 1,
  };
  // .im_home_proto.UserInfo FriendInfo = 1;
  bool has_friendinfo() const;
  private:
  bool _internal_has_friendinfo() const;
  public:
  void clear_friendinfo();
  const ::im_home_proto::UserInfo& friendinfo() const;
  PROTOBUF_NODISCARD ::im_home_proto::UserInfo* release_friendinfo();
  ::im_home_proto::UserInfo* mutable_friendinfo();
  void set_allocated_friendinfo(::im_home_proto::UserInfo* friendinfo);
  private:
  const ::im_home_proto::UserInfo& _internal_friendinfo() const;
  ::im_home_proto::UserInfo* _internal_mutable_friendinfo();
  public:
  void unsafe_arena_set_allocated_friendinfo(
      ::im_home_proto::UserInfo* friendinfo);
  ::im_home_proto::UserInfo* unsafe_arena_release_friendinfo();

  // @@protoc_insertion_point(class_scope:im_home_proto.ApplyFriendsRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::im_home_proto::UserInfo* friendinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class AgreeFriendApplyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.AgreeFriendApplyReq) */ {
 public:
  inline AgreeFriendApplyReq() : AgreeFriendApplyReq(nullptr) {}
  ~AgreeFriendApplyReq() override;
  explicit PROTOBUF_CONSTEXPR AgreeFriendApplyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreeFriendApplyReq(const AgreeFriendApplyReq& from);
  AgreeFriendApplyReq(AgreeFriendApplyReq&& from) noexcept
    : AgreeFriendApplyReq() {
    *this = ::std::move(from);
  }

  inline AgreeFriendApplyReq& operator=(const AgreeFriendApplyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreeFriendApplyReq& operator=(AgreeFriendApplyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreeFriendApplyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreeFriendApplyReq* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendApplyReq*>(
               &_AgreeFriendApplyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AgreeFriendApplyReq& a, AgreeFriendApplyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreeFriendApplyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreeFriendApplyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgreeFriendApplyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgreeFriendApplyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreeFriendApplyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgreeFriendApplyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeFriendApplyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.AgreeFriendApplyReq";
  }
  protected:
  explicit AgreeFriendApplyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsIDFieldNumber = 1,
  };
  // int64 FriendsID = 1;
  void clear_friendsid();
  int64_t friendsid() const;
  void set_friendsid(int64_t value);
  private:
  int64_t _internal_friendsid() const;
  void _internal_set_friendsid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.AgreeFriendApplyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friendsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class AgreeFriendApplyRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.AgreeFriendApplyRes) */ {
 public:
  inline AgreeFriendApplyRes() : AgreeFriendApplyRes(nullptr) {}
  ~AgreeFriendApplyRes() override;
  explicit PROTOBUF_CONSTEXPR AgreeFriendApplyRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreeFriendApplyRes(const AgreeFriendApplyRes& from);
  AgreeFriendApplyRes(AgreeFriendApplyRes&& from) noexcept
    : AgreeFriendApplyRes() {
    *this = ::std::move(from);
  }

  inline AgreeFriendApplyRes& operator=(const AgreeFriendApplyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreeFriendApplyRes& operator=(AgreeFriendApplyRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreeFriendApplyRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreeFriendApplyRes* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendApplyRes*>(
               &_AgreeFriendApplyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AgreeFriendApplyRes& a, AgreeFriendApplyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreeFriendApplyRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreeFriendApplyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgreeFriendApplyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgreeFriendApplyRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreeFriendApplyRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgreeFriendApplyRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeFriendApplyRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.AgreeFriendApplyRes";
  }
  protected:
  explicit AgreeFriendApplyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsIDFieldNumber = 1,
  };
  // int64 FriendsID = 1;
  void clear_friendsid();
  int64_t friendsid() const;
  void set_friendsid(int64_t value);
  private:
  int64_t _internal_friendsid() const;
  void _internal_set_friendsid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.AgreeFriendApplyRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friendsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class DelFriendsReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.DelFriendsReq) */ {
 public:
  inline DelFriendsReq() : DelFriendsReq(nullptr) {}
  ~DelFriendsReq() override;
  explicit PROTOBUF_CONSTEXPR DelFriendsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendsReq(const DelFriendsReq& from);
  DelFriendsReq(DelFriendsReq&& from) noexcept
    : DelFriendsReq() {
    *this = ::std::move(from);
  }

  inline DelFriendsReq& operator=(const DelFriendsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendsReq& operator=(DelFriendsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendsReq* internal_default_instance() {
    return reinterpret_cast<const DelFriendsReq*>(
               &_DelFriendsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DelFriendsReq& a, DelFriendsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendsReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendsReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendsReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.DelFriendsReq";
  }
  protected:
  explicit DelFriendsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsIDFieldNumber = 1,
  };
  // int64 FriendsID = 1;
  void clear_friendsid();
  int64_t friendsid() const;
  void set_friendsid(int64_t value);
  private:
  int64_t _internal_friendsid() const;
  void _internal_set_friendsid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.DelFriendsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friendsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class DelFriendsRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im_home_proto.DelFriendsRes) */ {
 public:
  inline DelFriendsRes() : DelFriendsRes(nullptr) {}
  ~DelFriendsRes() override;
  explicit PROTOBUF_CONSTEXPR DelFriendsRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendsRes(const DelFriendsRes& from);
  DelFriendsRes(DelFriendsRes&& from) noexcept
    : DelFriendsRes() {
    *this = ::std::move(from);
  }

  inline DelFriendsRes& operator=(const DelFriendsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendsRes& operator=(DelFriendsRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendsRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendsRes* internal_default_instance() {
    return reinterpret_cast<const DelFriendsRes*>(
               &_DelFriendsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DelFriendsRes& a, DelFriendsRes& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendsRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendsRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendsRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendsRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendsRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendsRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im_home_proto.DelFriendsRes";
  }
  protected:
  explicit DelFriendsRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsIDFieldNumber = 1,
  };
  // int64 FriendsID = 1;
  void clear_friendsid();
  int64_t friendsid() const;
  void set_friendsid(int64_t value);
  private:
  int64_t _internal_friendsid() const;
  void _internal_set_friendsid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im_home_proto.DelFriendsRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friendsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_home_5ffriends_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendInfoStatus

// .im_home_proto.UserInfo Friend = 1;
inline bool FriendInfoStatus::_internal_has_friend_() const {
  return this != internal_default_instance() && friend__ != nullptr;
}
inline bool FriendInfoStatus::has_friend_() const {
  return _internal_has_friend_();
}
inline const ::im_home_proto::UserInfo& FriendInfoStatus::_internal_friend_() const {
  const ::im_home_proto::UserInfo* p = friend__;
  return p != nullptr ? *p : reinterpret_cast<const ::im_home_proto::UserInfo&>(
      ::im_home_proto::_UserInfo_default_instance_);
}
inline const ::im_home_proto::UserInfo& FriendInfoStatus::friend_() const {
  // @@protoc_insertion_point(field_get:im_home_proto.FriendInfoStatus.Friend)
  return _internal_friend_();
}
inline void FriendInfoStatus::unsafe_arena_set_allocated_friend_(
    ::im_home_proto::UserInfo* friend_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  friend__ = friend_;
  if (friend_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im_home_proto.FriendInfoStatus.Friend)
}
inline ::im_home_proto::UserInfo* FriendInfoStatus::release_friend_() {
  
  ::im_home_proto::UserInfo* temp = friend__;
  friend__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im_home_proto::UserInfo* FriendInfoStatus::unsafe_arena_release_friend_() {
  // @@protoc_insertion_point(field_release:im_home_proto.FriendInfoStatus.Friend)
  
  ::im_home_proto::UserInfo* temp = friend__;
  friend__ = nullptr;
  return temp;
}
inline ::im_home_proto::UserInfo* FriendInfoStatus::_internal_mutable_friend_() {
  
  if (friend__ == nullptr) {
    auto* p = CreateMaybeMessage<::im_home_proto::UserInfo>(GetArenaForAllocation());
    friend__ = p;
  }
  return friend__;
}
inline ::im_home_proto::UserInfo* FriendInfoStatus::mutable_friend_() {
  ::im_home_proto::UserInfo* _msg = _internal_mutable_friend_();
  // @@protoc_insertion_point(field_mutable:im_home_proto.FriendInfoStatus.Friend)
  return _msg;
}
inline void FriendInfoStatus::set_allocated_friend_(::im_home_proto::UserInfo* friend_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  if (friend_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_));
    if (message_arena != submessage_arena) {
      friend_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_, submessage_arena);
    }
    
  } else {
    
  }
  friend__ = friend_;
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.FriendInfoStatus.Friend)
}

// bool IsUpdateHead = 2;
inline void FriendInfoStatus::clear_isupdatehead() {
  isupdatehead_ = false;
}
inline bool FriendInfoStatus::_internal_isupdatehead() const {
  return isupdatehead_;
}
inline bool FriendInfoStatus::isupdatehead() const {
  // @@protoc_insertion_point(field_get:im_home_proto.FriendInfoStatus.IsUpdateHead)
  return _internal_isupdatehead();
}
inline void FriendInfoStatus::_internal_set_isupdatehead(bool value) {
  
  isupdatehead_ = value;
}
inline void FriendInfoStatus::set_isupdatehead(bool value) {
  _internal_set_isupdatehead(value);
  // @@protoc_insertion_point(field_set:im_home_proto.FriendInfoStatus.IsUpdateHead)
}

// -------------------------------------------------------------------

// FriendsStatusList

// repeated .im_home_proto.FriendInfoStatus FriendsStatusList = 1;
inline int FriendsStatusList::_internal_friendsstatuslist_size() const {
  return friendsstatuslist_.size();
}
inline int FriendsStatusList::friendsstatuslist_size() const {
  return _internal_friendsstatuslist_size();
}
inline void FriendsStatusList::clear_friendsstatuslist() {
  friendsstatuslist_.Clear();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::mutable_friendsstatuslist(int index) {
  // @@protoc_insertion_point(field_mutable:im_home_proto.FriendsStatusList.FriendsStatusList)
  return friendsstatuslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
FriendsStatusList::mutable_friendsstatuslist() {
  // @@protoc_insertion_point(field_mutable_list:im_home_proto.FriendsStatusList.FriendsStatusList)
  return &friendsstatuslist_;
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::_internal_friendsstatuslist(int index) const {
  return friendsstatuslist_.Get(index);
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::friendsstatuslist(int index) const {
  // @@protoc_insertion_point(field_get:im_home_proto.FriendsStatusList.FriendsStatusList)
  return _internal_friendsstatuslist(index);
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::_internal_add_friendsstatuslist() {
  return friendsstatuslist_.Add();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::add_friendsstatuslist() {
  ::im_home_proto::FriendInfoStatus* _add = _internal_add_friendsstatuslist();
  // @@protoc_insertion_point(field_add:im_home_proto.FriendsStatusList.FriendsStatusList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
FriendsStatusList::friendsstatuslist() const {
  // @@protoc_insertion_point(field_list:im_home_proto.FriendsStatusList.FriendsStatusList)
  return friendsstatuslist_;
}

// repeated .im_home_proto.FriendInfoStatus SendFriendApplyList = 2;
inline int FriendsStatusList::_internal_sendfriendapplylist_size() const {
  return sendfriendapplylist_.size();
}
inline int FriendsStatusList::sendfriendapplylist_size() const {
  return _internal_sendfriendapplylist_size();
}
inline void FriendsStatusList::clear_sendfriendapplylist() {
  sendfriendapplylist_.Clear();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::mutable_sendfriendapplylist(int index) {
  // @@protoc_insertion_point(field_mutable:im_home_proto.FriendsStatusList.SendFriendApplyList)
  return sendfriendapplylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
FriendsStatusList::mutable_sendfriendapplylist() {
  // @@protoc_insertion_point(field_mutable_list:im_home_proto.FriendsStatusList.SendFriendApplyList)
  return &sendfriendapplylist_;
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::_internal_sendfriendapplylist(int index) const {
  return sendfriendapplylist_.Get(index);
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::sendfriendapplylist(int index) const {
  // @@protoc_insertion_point(field_get:im_home_proto.FriendsStatusList.SendFriendApplyList)
  return _internal_sendfriendapplylist(index);
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::_internal_add_sendfriendapplylist() {
  return sendfriendapplylist_.Add();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::add_sendfriendapplylist() {
  ::im_home_proto::FriendInfoStatus* _add = _internal_add_sendfriendapplylist();
  // @@protoc_insertion_point(field_add:im_home_proto.FriendsStatusList.SendFriendApplyList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
FriendsStatusList::sendfriendapplylist() const {
  // @@protoc_insertion_point(field_list:im_home_proto.FriendsStatusList.SendFriendApplyList)
  return sendfriendapplylist_;
}

// repeated .im_home_proto.FriendInfoStatus ReceiveFriendApplyList = 3;
inline int FriendsStatusList::_internal_receivefriendapplylist_size() const {
  return receivefriendapplylist_.size();
}
inline int FriendsStatusList::receivefriendapplylist_size() const {
  return _internal_receivefriendapplylist_size();
}
inline void FriendsStatusList::clear_receivefriendapplylist() {
  receivefriendapplylist_.Clear();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::mutable_receivefriendapplylist(int index) {
  // @@protoc_insertion_point(field_mutable:im_home_proto.FriendsStatusList.ReceiveFriendApplyList)
  return receivefriendapplylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >*
FriendsStatusList::mutable_receivefriendapplylist() {
  // @@protoc_insertion_point(field_mutable_list:im_home_proto.FriendsStatusList.ReceiveFriendApplyList)
  return &receivefriendapplylist_;
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::_internal_receivefriendapplylist(int index) const {
  return receivefriendapplylist_.Get(index);
}
inline const ::im_home_proto::FriendInfoStatus& FriendsStatusList::receivefriendapplylist(int index) const {
  // @@protoc_insertion_point(field_get:im_home_proto.FriendsStatusList.ReceiveFriendApplyList)
  return _internal_receivefriendapplylist(index);
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::_internal_add_receivefriendapplylist() {
  return receivefriendapplylist_.Add();
}
inline ::im_home_proto::FriendInfoStatus* FriendsStatusList::add_receivefriendapplylist() {
  ::im_home_proto::FriendInfoStatus* _add = _internal_add_receivefriendapplylist();
  // @@protoc_insertion_point(field_add:im_home_proto.FriendsStatusList.ReceiveFriendApplyList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im_home_proto::FriendInfoStatus >&
FriendsStatusList::receivefriendapplylist() const {
  // @@protoc_insertion_point(field_list:im_home_proto.FriendsStatusList.ReceiveFriendApplyList)
  return receivefriendapplylist_;
}

// -------------------------------------------------------------------

// ApplyFriendsReq

// int64 ApplyFriendsID = 1;
inline void ApplyFriendsReq::clear_applyfriendsid() {
  applyfriendsid_ = int64_t{0};
}
inline int64_t ApplyFriendsReq::_internal_applyfriendsid() const {
  return applyfriendsid_;
}
inline int64_t ApplyFriendsReq::applyfriendsid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ApplyFriendsReq.ApplyFriendsID)
  return _internal_applyfriendsid();
}
inline void ApplyFriendsReq::_internal_set_applyfriendsid(int64_t value) {
  
  applyfriendsid_ = value;
}
inline void ApplyFriendsReq::set_applyfriendsid(int64_t value) {
  _internal_set_applyfriendsid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.ApplyFriendsReq.ApplyFriendsID)
}

// -------------------------------------------------------------------

// ApplyFriendsRes

// .im_home_proto.UserInfo FriendInfo = 1;
inline bool ApplyFriendsRes::_internal_has_friendinfo() const {
  return this != internal_default_instance() && friendinfo_ != nullptr;
}
inline bool ApplyFriendsRes::has_friendinfo() const {
  return _internal_has_friendinfo();
}
inline const ::im_home_proto::UserInfo& ApplyFriendsRes::_internal_friendinfo() const {
  const ::im_home_proto::UserInfo* p = friendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::im_home_proto::UserInfo&>(
      ::im_home_proto::_UserInfo_default_instance_);
}
inline const ::im_home_proto::UserInfo& ApplyFriendsRes::friendinfo() const {
  // @@protoc_insertion_point(field_get:im_home_proto.ApplyFriendsRes.FriendInfo)
  return _internal_friendinfo();
}
inline void ApplyFriendsRes::unsafe_arena_set_allocated_friendinfo(
    ::im_home_proto::UserInfo* friendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  friendinfo_ = friendinfo;
  if (friendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im_home_proto.ApplyFriendsRes.FriendInfo)
}
inline ::im_home_proto::UserInfo* ApplyFriendsRes::release_friendinfo() {
  
  ::im_home_proto::UserInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im_home_proto::UserInfo* ApplyFriendsRes::unsafe_arena_release_friendinfo() {
  // @@protoc_insertion_point(field_release:im_home_proto.ApplyFriendsRes.FriendInfo)
  
  ::im_home_proto::UserInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
  return temp;
}
inline ::im_home_proto::UserInfo* ApplyFriendsRes::_internal_mutable_friendinfo() {
  
  if (friendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::im_home_proto::UserInfo>(GetArenaForAllocation());
    friendinfo_ = p;
  }
  return friendinfo_;
}
inline ::im_home_proto::UserInfo* ApplyFriendsRes::mutable_friendinfo() {
  ::im_home_proto::UserInfo* _msg = _internal_mutable_friendinfo();
  // @@protoc_insertion_point(field_mutable:im_home_proto.ApplyFriendsRes.FriendInfo)
  return _msg;
}
inline void ApplyFriendsRes::set_allocated_friendinfo(::im_home_proto::UserInfo* friendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  if (friendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo));
    if (message_arena != submessage_arena) {
      friendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendinfo, submessage_arena);
    }
    
  } else {
    
  }
  friendinfo_ = friendinfo;
  // @@protoc_insertion_point(field_set_allocated:im_home_proto.ApplyFriendsRes.FriendInfo)
}

// -------------------------------------------------------------------

// AgreeFriendApplyReq

// int64 FriendsID = 1;
inline void AgreeFriendApplyReq::clear_friendsid() {
  friendsid_ = int64_t{0};
}
inline int64_t AgreeFriendApplyReq::_internal_friendsid() const {
  return friendsid_;
}
inline int64_t AgreeFriendApplyReq::friendsid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.AgreeFriendApplyReq.FriendsID)
  return _internal_friendsid();
}
inline void AgreeFriendApplyReq::_internal_set_friendsid(int64_t value) {
  
  friendsid_ = value;
}
inline void AgreeFriendApplyReq::set_friendsid(int64_t value) {
  _internal_set_friendsid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.AgreeFriendApplyReq.FriendsID)
}

// -------------------------------------------------------------------

// AgreeFriendApplyRes

// int64 FriendsID = 1;
inline void AgreeFriendApplyRes::clear_friendsid() {
  friendsid_ = int64_t{0};
}
inline int64_t AgreeFriendApplyRes::_internal_friendsid() const {
  return friendsid_;
}
inline int64_t AgreeFriendApplyRes::friendsid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.AgreeFriendApplyRes.FriendsID)
  return _internal_friendsid();
}
inline void AgreeFriendApplyRes::_internal_set_friendsid(int64_t value) {
  
  friendsid_ = value;
}
inline void AgreeFriendApplyRes::set_friendsid(int64_t value) {
  _internal_set_friendsid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.AgreeFriendApplyRes.FriendsID)
}

// -------------------------------------------------------------------

// DelFriendsReq

// int64 FriendsID = 1;
inline void DelFriendsReq::clear_friendsid() {
  friendsid_ = int64_t{0};
}
inline int64_t DelFriendsReq::_internal_friendsid() const {
  return friendsid_;
}
inline int64_t DelFriendsReq::friendsid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.DelFriendsReq.FriendsID)
  return _internal_friendsid();
}
inline void DelFriendsReq::_internal_set_friendsid(int64_t value) {
  
  friendsid_ = value;
}
inline void DelFriendsReq::set_friendsid(int64_t value) {
  _internal_set_friendsid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.DelFriendsReq.FriendsID)
}

// -------------------------------------------------------------------

// DelFriendsRes

// int64 FriendsID = 1;
inline void DelFriendsRes::clear_friendsid() {
  friendsid_ = int64_t{0};
}
inline int64_t DelFriendsRes::_internal_friendsid() const {
  return friendsid_;
}
inline int64_t DelFriendsRes::friendsid() const {
  // @@protoc_insertion_point(field_get:im_home_proto.DelFriendsRes.FriendsID)
  return _internal_friendsid();
}
inline void DelFriendsRes::_internal_set_friendsid(int64_t value) {
  
  friendsid_ = value;
}
inline void DelFriendsRes::set_friendsid(int64_t value) {
  _internal_set_friendsid(value);
  // @@protoc_insertion_point(field_set:im_home_proto.DelFriendsRes.FriendsID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_home_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5ffriends_2eproto
